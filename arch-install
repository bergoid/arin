#!/bin/bash

. arin-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rp-utils" >&2
  exit 1
fi

function showHelp
{
cat << DOCSTRING
Usage: $(basename "$0") [CONFIGFILE]

Arch linux installation script.
DOCSTRING
}

function totalRam
{
    cat /proc/meminfo | grep MemTotal | sed "s/^MemTotal:\s*\([0-9]*\)\skB/\1K/" | numfmt --from=si --to=si --round=nearest --format "%.0f"
}

checkForHelp $1

requireRoot

# Source config file
configFile="$1"
if [ -n "$configFile" ]; then
    try test -f "$configFile"
    try . "$configFile"
fi

echo ############################################################
echo #                                                          #
echo #  WARNING : this will wipe all previous data on your      #
echo #            target device/image!                          #
echo #                                                          #
echo ############################################################
echo

# Prompt for config values, if missing
promptIfEmpty target "Device (or image file) to install Arch Linux on"
promptIfEmpty userName "Username to create on the system"
promptIfEmpty password "User password to login on the system"
promptIfEmpty hostName "Hostname of the system"
promptIfEmpty wifiSsid "SSID of the Wi-Fi network (leave empty if you don't want to configure Wi-Fi)"
promptIfEmpty wifiPassphrase "Passphrase of the Wi-Fi network (leave empty if you don't want to configure Wi-Fi)"

# Validate config values
try test -n "$target"
try test -n "$userName"
try test -n "$password"
try test -n "$hostName"
try test -n "$wifiSsid"
try test -n "$wifiPassphrase"
target="$(readlink -f "$target")"

# Print all config
echo
echo target: $target
echo userName: $userName
echo password: $password
echo hostName: $hostName
echo wifiSsid: $wifiSsid
echo wifiPassphrase: $wifiPassphrase

# Determine if we're working with an image file
if isSubPathOf "$target" "/dev"; then
    targetIsImage=false
else
    targetIsImage=true
    # Check if target image file exists
    try test -f "$target"
fi

# Check if target is not mounted
mountOutput=$(mount | grep "$target")
if [ "$?" -eq "0" ]; then
    errcho "Error. The target device is mounted:"
    errcho $mountOutput
    exit 1
fi

#
# Swap space recommendations
#
# https://askubuntu.com/questions/49109/i-have-16gb-ram-do-i-need-32gb-swap/49138#49138
#
#    RAM         Recommended swap space         Recommended swap space
#                                               if allowing for hibernation
#
#    <= 2GB      2 times the amount of RAM      3 times the amount of RAM
#    2GB-8GB     Equal to the amount of RAM     2 times the amount of RAM
#    8GB-64GB    At least 4 GB                  1.5 times the amount of RAM
#    >=64GB      At least 4 GB                  Hibernation not recommended
#

# (Re-)partition the target: 'root', 'swap' and 'home'
rootSize=2G
# TODO : check available space on target
#rootSize=6G
# TODO : calculate swapSize according to recommendations
swapSize=$(totalRam)
exitOnError "Error: could not obtain the RAM size"

echo swap size == $swapSize

try sfdisk --label dos --wipe always --wipe-partitions always "$target" << EOF
size=$rootSize,type=83
size=$swapSize,type=82
type=83
EOF

p=
# If the target is an image file, set it up as a loop device
if $targetIsImage; then
    createLoopDevice "$target"
    targetDevice="$loopDevice"
    p=p
else
    targetDevice="$target"
fi

partitionRoot="${targetDevice}${p}1"
partitionSwap="${targetDevice}${p}2"
partitionHome="${targetDevice}${p}3"

# Format the partitions of the target device
mkfs.ext4 "$partitionRoot"
mkswap "$partitionSwap"
swapon "$partitionSwap"
mkfs.ext4 "$partitionHome"

# Mount the root & home partitions in a folder
mountDir="mount-$hostName-$(timestamp-id)"
mountPartition "$partitionRoot" "$mountDir/root"
mountPartition "$partitionHome" "$mountDir/home"

# Make sure the system clock on the host OS is synced with NTP
try timedatectl set-ntp true
