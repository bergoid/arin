#!/bin/bash

. arin-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rp-utils" >&2
  exit 1
fi

function showHelp
{
cat << DOCSTRING
Usage: $(basename "$0") [CONFIGFILE]

Arch linux installation script.
DOCSTRING
}

require numfmt fallocate sfdisk

############################################################
#
# Check if a given string represents an integer
#
# isInteger STRING
#
# The exit status of this function is zero if STRING is
# an integer and nonzero otherwise.
#
function isInteger
{
    [[ $1 =~ ^[0-9]+$ ]]
}

############################################################
#
# Convert a number representing an amount of bytes to a
# human-readable format.
#
# getHumanBytes NUMBYTES
#
function getHumanBytes
{
    amountInBytes="${1:-0}"
    try isInteger "$amountInBytes"

    echo $amountInBytes | numfmt --from=si --to=si --round=nearest --format "%.0f"
}

############################################################
#
# Obtain the amount of RAM in bytes
#
function getRamSizeBytes
{
    local ramSizeKb=$(cat /proc/meminfo | grep MemTotal | sed "s/^MemTotal:\s*\([0-9]*\)\skB/\1/")
    try isInteger "$ramSizeKb"

    echo $(( $ramSizeKb * 1024 ))
}

bytes500M=524288000
bytes2G=2147483648
#bytes4G=4294967296
bytes8G=8589934592
#bytes64G=68719476736

############################################################
#
# Calculate the recommended amount of swap space.
#
# getSwapSizeBytes RAMSIZE ALLOWHIBERNATION
#
# RAMSIZE: the amount of RAM in bytes
# ALLOWHIBERNATION: if "true", the ability for hibernation
#                   will be taken into account
#
function getSwapSizeBytes
{

#
# Swap space recommendations
#
# https://askubuntu.com/questions/49109/i-have-16gb-ram-do-i-need-32gb-swap/49138#49138
#
#    RAM         [1] Recommended swap space           [2] Recommended swap space
#                                                     if allowing for hibernation
#    --------    --------------------------------     ---------------------------------
#    <= 2GB      [1.1] 2 times the amount of RAM      [2.1] 3 times the amount of RAM
#    2GB-8GB     [1.2] Equal to the amount of RAM     [2.2] 2 times the amount of RAM
#    8GB-64GB    [1.3] At least 4 GB                  [2.3] 1.5 times the amount of RAM
#    >=64GB      [1.4] At least 4 GB                  [2.4] Hibernation not recommended
#

    local ramBytes="${1:-0}"
    local allowHibernation=${2:-true}
    try test -n "$ramBytes"
    try test "$allowHibernation" = "true" -o "$allowHibernation" = "false"

    # [2]
    if $allowHibernation; then

       # [2.1]
       if [ $ramBytes -le $bytes2G ]; then
           echo $(( $ramBytes * 3 ))
           return
       fi

       # [2.2]
       if [ $ramBytes -le $bytes8G ]; then
           echo $(( $ramBytes * 2 ))
           return
       fi

       # [2.3]
       # [2.4] Hibernation not recommended,
       #       but just return 1.5x the amount of RAM
       echo $(( $ramBytes * 3 / 2 ))
       return

    # [1]
    else

       # [1.1]
       if [ $ramBytes -le $bytes2G ]; then
           echo $(( $ramBytes * 2 ))
           return
       fi

       # [1.2]
       if [ $ramBytes -le $bytes8G ]; then
           echo $ramBytes
           return
       fi

       # [1.3], [1.4] At least 4GB,
       # but just return 8GB
       echo $bytes8G
       return

    fi

}

checkForHelp $1

requireRoot

# Source config file
configFile="$1"
if [ -n "$configFile" ]; then
    try test -f "$configFile"
    try . "$configFile"
fi

echo ############################################################
echo #                                                          #
echo #  WARNING : this will wipe all previous data on your      #
echo #            target device/image!                          #
echo #                                                          #
echo ############################################################
echo

# Prompt for config values, if missing
promptIfEmpty target "Device (or image file) to install Arch Linux on"
promptIfEmpty userName "Username to create on the system"
promptIfEmpty password "User password to login on the system"
promptIfEmpty hostName "Hostname of the system"
promptIfEmpty wifiSsid "SSID of the Wi-Fi network (leave empty if you don't want to configure Wi-Fi)"
promptIfEmpty wifiPassphrase "Passphrase of the Wi-Fi network (leave empty if you don't want to configure Wi-Fi)"

# Validate config values
try test -n "$target"
try test -n "$userName"
try test -n "$password"
try test -n "$hostName"
try test -n "$wifiSsid"
try test -n "$wifiPassphrase"
target="$(readlink -f "$target")"

# Print all config
echo
echo target: $target
echo userName: $userName
echo password: $password
echo hostName: $hostName
echo wifiSsid: $wifiSsid
echo wifiPassphrase: $wifiPassphrase

# Determine if we're working with an image file
if isSubPathOf "$target" "/dev"; then
    targetIsImage=false
else
    targetIsImage=true
    # Check if target image file exists
    try test -f "$target"
fi

# Check if target is not mounted
mountOutput=$(mount | grep "$target")
if [ "$?" -eq "0" ]; then
    errcho "Error. The target device is mounted:"
    errcho $mountOutput
    exit 1
fi

# (Re-)partition the target: 'root', 'swap' and 'home'

# Get RAM size
ramSizeBytes=$(getRamSizeBytes)
exitOnError "Error: could not obtain the RAM size"
ramSizeHuman=$(getHumanBytes $ramSizeBytes)
echo RAM size == $ramSizeHuman \($ramSizeBytes bytes\)

# Calculate the recommended swap size
swapSizeBytes=$(getSwapSizeBytes $ramSizeBytes true)
exitOnError "Error: could not obtain the swap size"
swapSizeHuman=$(getHumanBytes $swapSizeBytes)
echo Swap size == $swapSizeHuman \($swapSizeBytes bytes\)

# Size of root FS
rootSizeBytes=$bytes2G
rootSizeHuman=$(getHumanBytes $rootSizeBytes)
echo Root size == $rootSizeHuman \($rootSizeBytes bytes\)

# Obtain the size of the target
if $targetIsImage; then
    require stat
    targetSizeBytes=$(stat --format='%s' "$target")
else
    require blockdev
    targetSizeBytes=$(blockdev --getsize64 "$target")
fi
exitOnError "Error: could not obtain the size of the target"
targetSizeHuman=$(getHumanBytes $targetSizeBytes)
echo Target size == $targetSizeHuman \($targetSizeBytes bytes\)

# Check if the target is of sufficient size
neededSizeBytes=$(( $rootSizeBytes + $swapSizeBytes + $bytes500M ))
if [ $neededSizeBytes -gt $targetSizeBytes ]; then
    errcho "Error: the target '$target' is too small"
    errcho "Size of '$target': $targetSizeHuman"
    errcho "Needed size: $(getHumanBytes $neededSizeBytes)"
    if $targetIsImage; then
        errcho "You can enlarge '$target' with this command:"
        errcho
        errcho "    fallocate -l $(getHumanBytes $(( $neededSizeBytes * 2 )) ) $(basename $target)"
        exitWith 1
    fi
fi

# Partition target
try sfdisk --label dos --wipe always --wipe-partitions always "$target" << EOF
size=$rootSizeHuman,type=83
size=$swapSizeHuman,type=82
type=83
EOF

p=
# If the target is an image file, set it up as a loop device
if $targetIsImage; then
    createLoopDevice "$target"
    targetDevice="$loopDevice"
    p=p
else
    targetDevice="$target"

fi

partitionRoot="${targetDevice}${p}1"
partitionSwap="${targetDevice}${p}2"
partitionHome="${targetDevice}${p}3"

# Format the partitions of the target device
mkfs.ext4 "$partitionRoot"
mkswap "$partitionSwap"
swapon "$partitionSwap"
mkfs.ext4 "$partitionHome"

# Mount the root & home partitions in a folder
mountDir="mount-$hostName-$(timestamp-id)"

tru \
    "rm -rf $mountDir" \
    mkdir -p "$mountDir"

mountPartition "$partitionRoot" "$mountDir/root"
mountPartition "$partitionHome" "$mountDir/home"

# Make sure the system clock on the host OS is synced with NTP
try timedatectl set-ntp true
